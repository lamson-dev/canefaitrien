package ;

import .DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PLANETS.
 */
public class Planet {

    private Long id;
    private String name;
    private Integer size;
    private Integer xCoordinate;
    private Integer yCoordinate;
    private String techLevel;
    private String situation;
    private Integer xOffset;
    private Integer yOffset;
    private Long dataId;
    private Long marketId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlanetDao myDao;

    private Marketplace marketplace;
    private Long marketplace__resolvedKey;


    public Planet() {
    }

    public Planet(Long id) {
        this.id = id;
    }

    public Planet(Long id, String name, Integer size, Integer xCoordinate, Integer yCoordinate, String techLevel, String situation, Integer xOffset, Integer yOffset, Long dataId, Long marketId) {
        this.id = id;
        this.name = name;
        this.size = size;
        this.xCoordinate = xCoordinate;
        this.yCoordinate = yCoordinate;
        this.techLevel = techLevel;
        this.situation = situation;
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.dataId = dataId;
        this.marketId = marketId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlanetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getSize() {
        return size;
    }

    public void setSize(Integer size) {
        this.size = size;
    }

    public Integer getXCoordinate() {
        return xCoordinate;
    }

    public void setXCoordinate(Integer xCoordinate) {
        this.xCoordinate = xCoordinate;
    }

    public Integer getYCoordinate() {
        return yCoordinate;
    }

    public void setYCoordinate(Integer yCoordinate) {
        this.yCoordinate = yCoordinate;
    }

    public String getTechLevel() {
        return techLevel;
    }

    public void setTechLevel(String techLevel) {
        this.techLevel = techLevel;
    }

    public String getSituation() {
        return situation;
    }

    public void setSituation(String situation) {
        this.situation = situation;
    }

    public Integer getXOffset() {
        return xOffset;
    }

    public void setXOffset(Integer xOffset) {
        this.xOffset = xOffset;
    }

    public Integer getYOffset() {
        return yOffset;
    }

    public void setYOffset(Integer yOffset) {
        this.yOffset = yOffset;
    }

    public Long getDataId() {
        return dataId;
    }

    public void setDataId(Long dataId) {
        this.dataId = dataId;
    }

    public Long getMarketId() {
        return marketId;
    }

    public void setMarketId(Long marketId) {
        this.marketId = marketId;
    }

    /** To-one relationship, resolved on first access. */
    public Marketplace getMarketplace() {
        if (marketplace__resolvedKey == null || !marketplace__resolvedKey.equals(marketId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MarketplaceDao targetDao = daoSession.getMarketplaceDao();
            marketplace = targetDao.load(marketId);
            marketplace__resolvedKey = marketId;
        }
        return marketplace;
    }

    public void setMarketplace(Marketplace marketplace) {
        this.marketplace = marketplace;
        marketId = marketplace == null ? null : marketplace.getId();
        marketplace__resolvedKey = marketId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
